import numpy as np
import random
import time

class Env:
    def __init__(self, height = 3, width = 10):
        self.__matrix = np.zeros((height, width))
        
        self.__width = width
        self.__heigth = height
        
        self.__score = 0
        self.__delay = 0.2

        self.__state = 0
        self.__x = 1
        self.__y = 2
        self.__matrix[self.__y,self.__x] = -1

        self.obstacle()

    def reset(self):
        self.__matrix = np.zeros((self.__heigth, self.__width))
        self.__state = 0
        self.__x = 1
        self.__y = 2

        self.__score = 0
        self.__delay = 0.2

        self.__matrix[self.__y,self.__x] = -1
        self.obstacle()

    def step(self):
        self.obstacle()

        for x in range(0,self.__width):
            if(self.__matrix[2,x] == 1):
                self.__matrix[2,x] = 0
                if(x>0):
                    self.__matrix[2,x-1] = 1             


    def get_animation_matrix(self):
        matrix = np.copy(self.__matrix)
        return matrix

    def getX(self):
        return self.__x

    def getY(self):
        return self.__y

    def getScore(self):
        return self.__score

    def getDelay(self):
        return self.__delay

    def setDelay(self, delayy):
        self.__delay = delayy

    def setScore(self, scoree):
        self.__score = scoree

    def obstacle(self):
        obsNumber = 0
        for x in range(0,self.__width):
            if(self.__matrix[2,x] == 1):
                obsNumber += 1
        if(obsNumber == 0):
            num = random.choice(range((self.__width//2),self.__width))
            self.__matrix[2,num] = 1

    def crash(self):
        if((self.__x == 1) and (self.__y == 2) and (self.__matrix[2,1] == 1)):
            return True
        else:
            return False


    def jump(self):
        self.__matrix[self.__y,self.__x] = 0
        self.__x = 1
        self.__y = 1
        self.__matrix[self.__y,self.__x] = -1

    def jumpback(self):
        self.__matrix[self.__y,self.__x] = 0
        self.__x = 1
        self.__y = 2
        self.__matrix[self.__y,self.__x] = -1
